#!/usr/bin/perl -w
#
# update-ca-certificates
#
# Copyright (c) 2010,2013 SUSE Linux Products GmbH
# Author: Ludwig Nussel
#
# Inspired by Debian's update-ca-certificates
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02111-1301,
# USA.
#

use strict;

use File::Basename;
use Getopt::Long;

my $hooksdir1 = '/etc/ca-certificates/update.d';
my $hooksdir2 = '/usr/lib/ca-certificates/update.d';
my $etccertsdir = "/etc/ssl/certs";
my $localstatedir = '/var/lib/ca-certificates';
my $pemdir = "$localstatedir/pem";
my $foundignored;

my (%added, %removed);

my ($opt_verbose, $opt_fresh, $opt_help);

sub startswith($$)
{
	return $_[1] eq substr($_[0], 0, length($_[1]));
}

sub targetfilename($)
{
	my $t = $etccertsdir.'/'.basename($_[0]);
	return $t;
}

sub addcert($)
{
	my $f = $_[0];
	my $t = targetfilename($f);
	if (-l $t) {
		my $d = readlink($t);
		return if ($d && $d eq $f);
		print STDERR "wrong symlink $f removed *)\n";
		$foundignored = 1;
		unlink($t);
	} elsif (-e $t) {
		print STDERR "$t in the way *)\n";
		$foundignored = 1;
		return;
	}
	if (symlink($f, $t)) {
		$added{$t} = 1;
	} else {
		print STDERR "symlink of $t failed: $!\n";
	}
}

sub removecert($)
{
	my $t = targetfilename($_[0]);
	if (-l $t) {
		$removed{$t} = 1;
		unlink $t;
	}
}

Getopt::Long::Configure("no_ignore_case");
GetOptions(
    "verbose|v"   => \$opt_verbose,
    "fresh|f"   => \$opt_fresh,
    "help|h"   => \$opt_help,
    ) or die "$!\n";

if ($opt_help)
{
	print "USAGE: $0 [OPTIONS]\n";
	print "OPTIIONS:\n";
	print "  --verbose, -v     verbose output\n";
	print "  --fresh, -f       start from scratch\n";
	print "  --help, -h        this screen\n";
	exit 0;
}

system("p11-kit", "extract", "--filter=ca-anchors", "--format=pem-directory", "-f", $pemdir) == 0 or die;

for my $f (<"$pemdir/*.pem">) {
	addcert($f);
}

# clean dangling symlinks
for my $f (<"$etccertsdir/*.pem">) {
	unless (-l $f) {
		print STDERR "$f is wrong here *)\n";
		$foundignored = 1;
		next;
	}
	if (-e $f) {
		my $d = readlink($f);
		unless ($d && startswith($d, "$pemdir")) {
			print STDERR "wrong symlink $f removed *)\n";
			$foundignored = 1;
			unlink $f
		}
	} else {
		$removed{$f} = 1;
		unlink $f
	}
}

chdir $etccertsdir || die "$!";
if (%added || %removed || $opt_fresh) {
       print "Updating certificates in $etccertsdir...\n";
       my $redir = ($opt_verbose?'':'> /dev/null');
       system("c_rehash . $redir");
	printf("%d added, %d removed.\n",
		(%added?(scalar keys %added):0),
		(%removed?(scalar keys %removed):0));
}

my @args;
push @args, '-f' if $opt_fresh;
push @args, '-v' if $opt_verbose;
for my $f (sort(glob("$hooksdir2/*.run"), glob("$hooksdir1/*.run"))) {
	system($f, @args);
}

if ($foundignored)
{
	print STDERR "\n* = CA Certificates in /etc/ssl/certs are only seen by openSSL.
To install CA-Certificates globally move them to
/etc/pki/trust/ancors instead!";
}
